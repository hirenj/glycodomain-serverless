{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {
    "exchangetoken" : {
      "Type" : "String",
      "Default" : "test-exchangetoken-1H1ELT3YAMDXB",
      "Description" : "Enter function name for exchangetoken function"
    },
    "datahandler" : {
      "Type" : "String",
      "Default" : "test-datahandler-93F0OU08EKJX",
      "Description" : "Enter function name for dataHandler function"
    },
    "loginhandler" : {
      "Type" : "String",
      "Default" : "test-loginhandler-HBZOMGEME6KI",
      "Description" : "Enter function name for loginhandler function"
    },
    "acceptWebhook" : {
      "Type" : "String",
      "Default" : "test-acceptWebhook-OEJ7E1VFOLGB"
    },
    "readAllData" : {
      "Type" : "String",
      "Default" : "test-readAllData-629PKZ1CQK7E"
    },
    "clustal" : {
      "Type" : "String",
      "Default" : "test-clustal-60WZ8D140RYX"
    }
  },
  "Resources": {
    "dataApi" : {
      "Type" : "AWS::ApiGateway::RestApi",
      "Properties" : {
        "Description" : "GatorData REST api",
        "Name" : "GatorData REST api"
      }
    },
    "productionDeployment": {
      "DependsOn": "dataApiLoginGET",
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "Description": "Default Deployment",
        "StageName": "productionDeploymentDummyStage"
      }
    },
    "Production": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "Production",
        "Description": "Production Stage",
        "RestApiId": { "Ref": "dataApi" },
        "DeploymentId": { "Ref": "productionDeployment" },
        "Variables": { "Stack": { "Ref": "AWS::StackName" } },
        "MethodSettings": []
      }
    },
    "authLoginhandler": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": "300",
        "AuthorizerUri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "loginhandler" }, "/invocations" ] ]},
        "Type": "TOKEN",
        "IdentityValidationExpression" : "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+",
        "IdentitySource": "method.request.header.Authorization",
        "Name": "Login_authoriser",
        "RestApiId": { "Ref": "dataApi" }
      }
    },
    "authLoginhandlerPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "loginhandler" } ] ]},
            "Principal": "apigateway.amazonaws.com"
        }
    },
    "authDatahandler": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": "0",
        "AuthorizerUri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "datahandler" }, "/invocations" ] ]},
        "Type": "TOKEN",
        "IdentityValidationExpression" : "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+",
        "IdentitySource": "method.request.header.Authorization",
        "Name": "Data_access_authoriser",
        "RestApiId": { "Ref": "dataApi" }
      }
    },
    "authDatahandlerPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "datahandler" } ] ]},
            "Principal": "apigateway.amazonaws.com"
        }
    },
    "dataApiLogin" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "login"
      }
    },
    "dataApiLoginGET": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiLogin" },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : {},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "exchangetoken" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiLoginGETPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "exchangetoken" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/GET/login"]]
                    }
        }
    },
    "dataApiExchangetoken" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "exchangetoken"
      }
    },
    "dataApiExchangetokenPOST": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiExchangetoken" },
        "HttpMethod": "POST",
        "AuthorizationType": "CUSTOM",
        "AuthorizerId" : { "Ref" : "authLoginhandler" },
        "RequestParameters" : { "method.request.header.Authorization" : true },
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : { "application/json" : "{ \"Authorization\" : \"$input.params().header.get('Authorization')\" }"},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "exchangetoken" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiExchangeTokenPOSTPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "exchangetoken" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/POST/exchangetoken"]]
                    }
        }
    },
    "dataApiHook" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "hook"
      }
    },
    "dataApiHookPOST" : {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiHook" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "RequestParameters" : {},
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : {},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "acceptWebhook" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiHookPOSTPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "acceptWebhook" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/POST/hook"]]
                    }
        }
    },
    "dataApiDoi" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "doi"
      }
    },
    "dataApiDoiDoi" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Ref" : "dataApiDoi" },
        "PathPart": "{doi}"
      }
    },
    "dataApiDoiDoiGET" : {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiDoiDoi" },
        "HttpMethod": "GET",
        "AuthorizationType": "CUSTOM",
        "AuthorizerId" : { "Ref" : "authDatahandler" },
        "RequestParameters" : { "method.request.header.Authorization" : true,
                                "method.request.path.doi" : true },
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : { "application/json" : "{ \"Authorization\" : \"$input.params().header.get('Authorization')\", \n \"acc\" : \"publications\",\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\" }"},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : { "application/json" : "#set($data = $input.path('$.data'))\n#set($wanted = $util.urlDecode($input.params('doi')))\n{\n#foreach($set in $data)\n  \"$set.dataset\" : {\n  \"title\" : \"$set.metadata.title\",\n  \"dois\" : $set.dois.values\n },\n#end\n  \"specific\" : [\n#foreach($set in $data)\n#if($set.dois.values.contains($wanted)) \"$set.dataset\" #end,\n#end\n    \"end\"\n  ]\n}" },
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "readAllData" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiDoiDoiGETPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "readAllData" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/GET/doi/{doi}"]]
                    }
        }
    },
    "dataApiData" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "data"
      }
    },
    "dataApiDataLatest" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Ref" : "dataApiData" },
        "PathPart": "latest"
      }
    },
    "dataApiDataLatestDataset" : {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId": { "Ref" : "dataApi" },
          "ParentId": { "Ref" : "dataApiDataLatest" },
          "PathPart": "{dataset}"
      }
    },
    "dataApiDataLatestDatasetAcc" : {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId": { "Ref" : "dataApi" },
          "ParentId": { "Ref" : "dataApiDataLatestDataset" },
          "PathPart": "{acc}"
      }
    },
    "dataApiDataLatestDatasetAccGET" : {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiDataLatestDatasetAcc" },
        "HttpMethod": "GET",
        "AuthorizationType": "CUSTOM",
        "AuthorizerId" : { "Ref" : "authDatahandler" },
        "RequestParameters" : { "method.request.header.Authorization" : true,
                                "method.request.path.dataset" : true,
                                "method.request.path.acc" : true },
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : { "application/json" : "{ \"Authorization\" : \"$input.params().header.get('Authorization')\", \n \"acc\" : \"$input.params('acc')\",\n \"dataset\" : \"$input.params('dataset')\",\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\" }"},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "readAllData" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiDataLatestDatasetAccGETPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "readAllData" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/GET/data/latest/{dataset}/{acc}"]]
                    }
        }
    },
    "dataApiDataLatestCombined" : {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId": { "Ref" : "dataApi" },
          "ParentId": { "Ref" : "dataApiDataLatest" },
          "PathPart": "combined"
      }
    },
    "dataApiDataLatestCombinedAcc" : {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
          "RestApiId": { "Ref" : "dataApi" },
          "ParentId": { "Ref" : "dataApiDataLatestCombined" },
          "PathPart": "{acc}"
      }
    },
    "dataApiDataLatestCombinedAccGET" : {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiDataLatestCombinedAcc" },
        "HttpMethod": "GET",
        "AuthorizationType": "CUSTOM",
        "AuthorizerId" : { "Ref" : "authDatahandler" },
        "RequestParameters" : { "method.request.header.Authorization" : true,
                                "method.request.path.acc" : true },
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : { "application/json" : "{ \"Authorization\" : \"$input.params().header.get('Authorization')\", \n \"acc\" : \"$input.params('acc')\",\n \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\" }"},
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "readAllData" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiDataLatestCombinedAccGETPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "readAllData" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/GET/data/latest/combined/{acc}"]]
                    }
        }
    },
    "dataApiTools" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Fn::GetAtt": ["dataApi", "RootResourceId"] },
        "PathPart": "tools"
      }
    },
    "dataApiToolsClustal" : {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ParentId": { "Ref" : "dataApiTools" },
        "PathPart": "clustal"
      }
    },
    "dataApiToolsClustalPOST" : {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "dataApi" },
        "ResourceId": { "Ref" : "dataApiToolsClustal" },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "RequestParameters" : {},
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod" : "POST",
          "PassthroughBehavior" : "WHEN_NO_MATCH",
          "RequestParameters" : {},
          "RequestTemplates" : { "application/json" : "{\"sequences\" : \"$util.escapeJavaScript($input.body)\"}",
                                 "application/x-www-form-urlencoded" : "## convert HTML POST data or HTTP GET query string to JSON\n \n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path(\"$\"))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n \n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n \n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n \n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n \n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n \n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ( ( $kvTokenised[0].length() > 0 ) && ( $kvTokenised[1].length() > 0 ) )\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n \n## next we set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach( $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n  #set($kvTokenised = $kvPair.split(\"=\"))\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() > 1 && $kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n#end\n}"
                               },
          "IntegrationResponses" : [
          {
            "ResponseParameters" : {},
            "ResponseTemplates" : {},
            "StatusCode" : "200"
          }],
          "Uri" : { "Fn::Join" :  [ "", [ "arn:aws:apigateway:",{ "Ref" : "AWS::Region" },":lambda:path/2015-03-31/functions/", "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "clustal" }, "/invocations" ] ]}
        },
        "MethodResponses" : [{"StatusCode" : 200 }]
      }
    },
    "dataApiToolsClustalPOSTPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action":"lambda:invokeFunction",
            "FunctionName": { "Fn::Join" :  [ "", [ "arn:aws:lambda:",{ "Ref" : "AWS::Region" },":", { "Ref" : "AWS::AccountId" } , ":function:", { "Ref" : "clustal" } ] ]},
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
                "Fn::Join": ["", [
                    "arn:aws:execute-api:", {"Ref" : "AWS::Region" } ,":", {"Ref" : "AWS::AccountId" }, ":", {"Ref" : "dataApi" },
                     "/*/POST/tools/clustal"]]
                    }
        }
    }
  }
}