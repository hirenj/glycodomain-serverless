AWSTemplateFormatVersion: '2010-09-09'
Parameters: {}
Resources:
  authRdatasethandler:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${rdatasethandler}/invocations'
      Type: TOKEN
      IdentityValidationExpression: .+
      IdentitySource: method.request.header.Auth
      Name: Rdataset_access_authoriser
      RestApiId: !Ref 'dataApi'
  authRdatasethandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${rdatasethandler}'
      Principal: apigateway.amazonaws.com
  dataApiRepository:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !GetAtt 'dataApi.RootResourceId'
      PathPart: repository
  dataApiRepositoryToken:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepository'
      PathPart: token
  dataApiRepositoryTokenToken:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositoryToken'
      PathPart: '{token}'
  dataApiRepositoryTokenTokenSrc:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositoryTokenToken'
      PathPart: src
  dataApiRepositoryTokenTokenSrcContrib:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositoryTokenTokenSrc'
      PathPart: contrib
  dataApiRepositoryTokenTokenSrcContribPackages:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositoryTokenTokenSrcContrib'
      PathPart: PACKAGES
  dataApiRepositoryTokenTokenSrcContribPackagesGz:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositoryTokenTokenSrcContrib'
      PathPart: PACKAGES.gz
  dataApiRepositoryTokenTokenSrcContribPackagesGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositoryTokenTokenSrcContribPackages'
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.token: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates: {}
        RequestParameters:
          integration.request.header.Accept: '''application/json'''
          integration.request.header.Auth: method.request.path.token
          integration.request.path.path: '''PACKAGES'''
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Content-Type: '''text/plain'''
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'https://${dataApi}.execute-api.${AWS::Region}.amazonaws.com/api/repository/src/contrib/{path}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true
  dataApiRepositoryTokenTokenSrcContribPackagesGzGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositoryTokenTokenSrcContribPackagesGz'
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.token: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode" : 403 }'
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            SelectionPattern: .*
            StatusCode: 403
      MethodResponses:
        - StatusCode: 403
  dataApiRepositoryTokenTokenSrcContribPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositoryTokenTokenSrcContrib'
      PathPart: '{path+}'
  dataApiRepositoryTokenTokenSrcContribPathGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositoryTokenTokenSrcContribPath'
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.token: true
        method.request.path.path: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates: {}
        RequestParameters:
          integration.request.header.Accept: '''application/octet-stream'''
          integration.request.header.Auth: method.request.path.token
          integration.request.path.path: method.request.path.path
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
          - ResponseParameters:
              method.response.header.Location: integration.response.header.Location
            ResponseTemplates: {}
            SelectionPattern: '302'
            StatusCode: 302
        Uri: !Sub 'https://${dataApi}.execute-api.${AWS::Region}.amazonaws.com/api/repository/src/contrib/{path}'
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 302
          ResponseParameters:
            method.response.header.Location: true
  dataApiRepositoryTokenTokenSrcContribPathHEAD:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositoryTokenTokenSrcContribPath'
      HttpMethod: HEAD
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.token: true
        method.request.path.path: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode" : 200 }'
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
      MethodResponses:
        - StatusCode: 200
  dataApiRepositorySrcContribPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositorySrcContrib'
      PathPart: '{path+}'
  dataApiRepositorySrcContribPathPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositorySrcContribPath'
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref 'authRdatasethandler'
      RequestParameters:
        method.request.path.path: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: '{ "path" : "$input.params().path.get(''path'')" }'
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${signRdataUrl}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiRepositorySrcContribPathPOSTPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${signRdataUrl}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/POST/repository/src/contrib/*'
  dataApiRepositoryTokenTokenSrcContribPackagesHEAD:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositoryTokenTokenSrcContribPackages'
      HttpMethod: HEAD
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.token: true
        method.request.path.path: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode" : 200 }'
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            SelectionPattern: .*
            StatusCode: 200
      MethodResponses:
        - StatusCode: 200
  dataApiRepositoryTokenTokenSrcContribPackagesGzHEAD:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositoryTokenTokenSrcContribPackagesGz'
      HttpMethod: HEAD
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.token: true
        method.request.path.path: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode" : 403 }'
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            SelectionPattern: .*
            StatusCode: 403
      MethodResponses:
        - StatusCode: 403
  dataApiRepositorySrc:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepository'
      PathPart: src
  dataApiRepositorySrcContrib:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositorySrc'
      PathPart: contrib
  dataApiRepositorySrcContribPACKAGES:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiRepositorySrcContrib'
      PathPart: PACKAGES
  dataApiRepositorySrcContribPACKAGESPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiRepositorySrcContribPACKAGES'
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref 'authRdatasethandler'
      RequestParameters:
        method.request.path.path: true
        method.request.header.Auth: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Auth')\"\
            , \n \"acc\" : \"publications\",\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates:
              application/json: |-
                #set($data = $input.path('$.data'))
                #set($extension='.RData.tar.gz')
                #set($packages = [])
                #set($has_rdata = false)
                #set($grants = $util.parseJson($context.authorizer.principalId))
                #set($grants_full = $grants['data-feature/full_rdata'])
                #set($grants_partial = $grants['data-feature/partial_rdata'])
                #if("$grants_partial" != "" || "$grants_full" != "")
                #set($has_rdata = true)
                #end
                #if("$grants_partial" != "")
                #set($rdata_prefix = 'partial_')
                #end
                #if("$grants_full" != "")
                #set($rdata_prefix = '')
                #end
                #foreach($set in $data)
                #set($idx = $velocityCount - 1)
                #if($has_rdata == true && "$data[$idx].metadata.rpackage" != "")
                #set($foo = $packages.add($data[$idx].metadata.rpackage))
                Package: gator.$data[$idx].metadata.rpackage.split('_')[0]
                File: $rdata_prefix$data[$idx].metadata.rpackage$extension
                Version: $data[$idx].metadata.rpackage.split('_')[1]
                NeedsCompilation: no

                #end
                #end
                #set($now = $input.path('$.retrieved'))
                #set($today = $now.split('T')[0])
                Package: gatordata
                File: gatordata.tar.gz
                Version: $today.replace('-','.')
                NeedsCompilation: no
                Imports:
                #foreach($set in $packages)
                #set($idx = $velocityCount - 1)
                    gator.$set.split('_')[0] (>= $set.split('_')[1]) #if($velocityCount < ${packages.size()}),#end
                #end
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiRepositorySrcContribPACKAGESPOSTPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/POST/repository/src/contrib/PACKAGES'