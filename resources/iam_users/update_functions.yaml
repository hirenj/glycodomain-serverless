AWSTemplateFormatVersion: '2010-09-09'
Parameters:
    rotateCertificates:
      Type: String
      Description: 'rotateCertificates'
    dataBucket:
      Type: String
      Description: 'dataBucket'
Resources:
  UpdateFunctionsCodeAndConfiguration:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Permissions to update code for lambda functions'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: UpdateFunctions
            Effect: Allow
            Action:
              - 'lambda:UpdateFunctionCode'
              - 'lambda:GetFunctionConfiguration'
              - 'lambda:UpdateFunctionConfiguration'
            Resource:
              - !<!Sub> 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${parentstackName}-*'
          - Sid: GetStackResources
            Effect: Allow
            Action:
              - 'cloudformation:ListStackResources'
            Resource:
              - !<!Sub> '${parentstack}'
              - !<!Sub> '${AWS::StackId}'
              - !<!Sub> '${optionsStack}'
          - Sid: RunRotateCertificates
            Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !<!Sub> 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${rotateCertificates}-*'
  updateFunctionResources:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: >
          import boto3, tempfile, shutil, zipfile, urllib.request, json, os, datetime

          def update_lambda(function,resources_file):
            lambdac = boto3.client('lambda')
            response = lambdac.get_function(FunctionName=function)
            if 'Code' in response:
              tempdir = tempfile.mkdtemp()
              lambdapath = os.path.join(tempdir,'lambda.zip')
              urllib.request.urlretrieve(response['Code']['Location'], lambdapath)
              remove_from_zip(lambdapath,'resources.conf.json')
              zip = zipfile.ZipFile(lambdapath,'a')
              zip.write(resources_file,'resources.conf.json')
              zip.close()

              with open(lambdapath,'rb') as zipdata:
                code = zipdata.read()
                lambdac.update_function_code(FunctionName=function,ZipFile=code)

          def remove_from_zip(zipfname, *filenames):
            tempdir = tempfile.mkdtemp()
            try:
              tempname = os.path.join(tempdir, 'new.zip')
              with zipfile.ZipFile(zipfname, 'r') as zipread:
                with zipfile.ZipFile(tempname, 'w') as zipwrite:
                  for item in zipread.infolist():
                    if item.filename not in filenames:
                      data = zipread.read(item.filename)
                      item.external_attr = 0o664 << 16
                      zipwrite.writestr(item, data)
              shutil.move(tempname, zipfname)
            finally:
              shutil.rmtree(tempdir)

          def mergedicts(dict1, dict2):
            """ Recursively merges dict2 into dict1 """
            if not isinstance(dict1, dict) or not isinstance(dict2, dict):
                return dict2
            for k in dict2:
                if k in dict1:
                    dict1[k] = mergedicts(dict1[k], dict2[k])
                else:
                    dict1[k] = dict2[k]
            return dict1

          def combine_resources(resources):
            resource_keys = {
              'AWS::Lambda::Function': 'functions',
              'AWS::S3::Bucket' : 'buckets',
              'AWS::DynamoDB::Table' : 'tables',
              'AWS::StepFunctions::StateMachine' : 'stepfunctions',
              'AWS::SQS::Queue' : 'queue',
              'AWS::SNS::Topic' : 'queue',
              'AWS::Events::Rule' : 'rule',
              'AWS::IAM::ManagedPolicy' : 'policies'
            }
            results = {
              'functions' : {},
              'buckets' : {},
              'tables' : {},
              'stepfunctions' : {},
              'queue' : {},
              'rule'  : {},
              'policies' : {}
            }

            wanted_stacks = []

            for resource in resources:
              if resource['ResourceType'] == 'AWS::CloudFormation::Stack':
                wanted_stacks.append(resource['PhysicalResourceId'])

              if resource['ResourceType'] in resource_keys:
                wanted_key = resource_keys[ resource['ResourceType'] ]
                results[wanted_key][ resource['LogicalResourceId'] ] = resource['PhysicalResourceId']

            for substack in wanted_stacks:
              subresults = combine_resources(retrieve_resources(substack.split('/')[1]))
              del subresults['functions']
              results = mergedicts(results,subresults)

            results['stack'] = os.environ['STACKNAME']
            results['timestamp'] = datetime.datetime.now().isoformat()

            return results

          def retrieve_resources(stack):
            cloudformation = boto3.client('cloudformation')
            next_token = None
            resources = []
            while len(resources) < 1 or next_token is not None:
              if next_token is not None:
                response = cloudformation.list_stack_resources(StackName=stack, NextToken = next_token)
                next_token = None
              else:
                response = cloudformation.list_stack_resources(StackName=stack)
              
              resources = resources + response['StackResourceSummaries']
              if 'NextToken' in response:
                next_token = response['NextToken']

            return resources

          def handler(event, context):
            resources = combine_resources(retrieve_resources(os.environ['STACKNAME']))
            tempdir = tempfile.mkdtemp()
            resources_file = os.path.join(tempdir,'resources.conf.json')
            with open(resources_file, 'w') as f:
              json.dump(resources, f, indent=2)
            for func in resources['functions']:
              update_lambda(resources['functions'][func], resources_file)
            s3 = boto3.client('s3')
            s3.upload_file(resources_file, resources['buckets']['dataBucket'], 'conf/resources.conf.json')
            message = 'Completed'
            return { 
              'message' : message
            }
      Description: updateFunctionResources
      Environment:
        Variables:
          STACKNAME: !<!Sub> '${parentstackName}'
      Handler: index.handler
      Role: !<!GetAtt> LambdaUpdateFunctionResourcesRole.Arn
      Runtime: python3.7
      MemorySize: 128
      Timeout: 120
  LambdaUpdateFunctionResourcesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ReadWriteFunctions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: WriteCertificatesConfig
                Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - !<!Sub> 'arn:aws:s3:::${dataBucket}/conf/resources.conf.json'
              - Sid: UpdateFunctions
                Effect: Allow
                Action:
                  - 'lambda:UpdateFunctionCode'
                  - 'lambda:GetFunction'
                Resource:
                  - !<!Sub> 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${parentstackName}-*'
              - Sid: GetStackResources
                Effect: Allow
                Action:
                  - 'cloudformation:ListStackResources'
                Resource:
                  - !<!Sub> '${parentstack}'
                  - !<!Sub> '${AWS::StackId}'
                  - !<!Sub> '${optionsStack}'
Outputs: {}