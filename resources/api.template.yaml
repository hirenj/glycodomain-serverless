AWSTemplateFormatVersion: '2010-09-09'
Parameters: {}
Resources:
  dataApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: GatorData REST api
      Name: !Sub 'GatorData REST api ${AWS::StackName}'
      BinaryMediaTypes:
        - application~1octet-stream
  authLoginhandler:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${loginhandler}/invocations'
      Type: TOKEN
      IdentityValidationExpression: Bearer [^\.]+\.[^\.]+\.[^\.]+
      IdentitySource: method.request.header.Authorization
      Name: Login_authoriser
      RestApiId: !Ref 'dataApi'
  authLoginhandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${loginhandler}'
      Principal: apigateway.amazonaws.com
  authDatahandler:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: '0'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${datahandler}/invocations'
      Type: TOKEN
      IdentityValidationExpression: Bearer [^\.]+\.[^\.]+\.[^\.]+
      IdentitySource: method.request.header.Authorization
      Name: Data_access_authoriser
      RestApiId: !Ref 'dataApi'
  authDatahandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${datahandler}'
      Principal: apigateway.amazonaws.com
  dataApiLogin:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !GetAtt 'dataApi.RootResourceId'
      PathPart: login
  dataApiLoginGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiLogin'
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates: {}
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${exchangetoken}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiLoginGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${exchangetoken}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/login'
  dataApiLoginPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiLogin'
      HttpMethod: POST
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authLoginhandler'
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: '{ "Authorization" : "$input.params().header.get(''Authorization'')"
            }'
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
          - ResponseParameters: {}
            ResponseTemplates: {}
            SelectionPattern: .*Unauthorized.*
            StatusCode: 401
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${exchangetoken}/invocations'
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 401
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  dataApiLoginPOSTPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${exchangetoken}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/POST/login'
  dataApiLoginConfig:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiLogin'
      PathPart: config
  dataApiLoginConfigGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiLoginConfig'
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode" : 200 }'
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: !Sub '{ "API_AUDIENCE" : "${AUTH0APIIDENTIFIER}",
                "AUTH0_DOMAIN" : "${AUTH0DOMAIN}"  }'
            StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
  dataApiDoi:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !GetAtt 'dataApi.RootResourceId'
      PathPart: doi
  dataApiDoiDoi:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDoi'
      PathPart: '{doi}'
  dataApiDoiDoiGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiDoiDoi'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
        method.request.path.doi: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Authorization')\"\
            , \n \"acc\" : \"publications\",\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates:
              application/json: |-
                #set($data = $input.path('$.data'))
                #set($wanted = $util.urlDecode($input.params('doi')))
                #set($any = 'false')
                {
                #foreach($set in $data)
                  "$set.dataset" : {
                  "title" : "$set.metadata.title",
                  "dois" : #if($set.dois.values.size() > 0) $set.dois.values #else [] #end
                 },
                #end
                  "specific" : [
                #foreach($set in $data)
                #if($set.dois.values.size() > 0 && $set.dois.values.contains($wanted) && $any == 'true') ,"$set.dataset" #end
                #if($set.dois.values.size() > 0 && $set.dois.values.contains($wanted) && $any == 'false') "$set.dataset" #set($any = 'true') #end
                #end
                  ]
                }
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiDoiDoiGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/doi/{doi}'
  dataApiMetadata:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !GetAtt 'dataApi.RootResourceId'
      PathPart: metadata
  dataApiMetadataGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiMetadata'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Authorization')\"\
            , \n \"acc\" : \"publications\",\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates:
              application/json: |-
                #set($data = $input.path('$.data'))
                #set($grants = $util.parseJson($context.authorizer.principalId))
                {
                #foreach($grant in $grants.keySet())
                #if($grant.split('/')[0] == 'data-feature')
                  "$grant.split('/')[1]" : { "type" : "data-feature" } #if($data.size() > 0),#end
                #end
                #end
                #foreach($set in $data)
                #set($idx = $velocityCount - 1)
                #set($metapath = "$.data[$idx].metadata")
                  "$set.dataset" : $input.json("$metapath")
                #if($foreach.hasNext),#end
                #end
                }
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiMetadataGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/metadata'
  dataApiMetadataDataset:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiMetadata'
      PathPart: '{dataset}'
  dataApiMetadataDatasetGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiMetadataDataset'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
        method.request.path.dataset: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Authorization')\"\
            , \n \"acc\" : \"metadata\",\n \"dataset\" : \"$input.params('dataset')\"\
            ,\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates:
              application/json: $input.json('$.metadata')
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiMetadataDatasetGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/metadata/*'
  dataApiData:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !GetAtt 'dataApi.RootResourceId'
      PathPart: data
  dataApiDataLatest:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiData'
      PathPart: latest
  dataApiDataLatestPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiDataLatest'
      HttpMethod: POST
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.grants: context.authorizer.principalId
        RequestTemplates:
          application/json: |
            { 
              "query": "{ posts { title } }"
            }
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Ref 'graphqlEndpoint'
      MethodResponses:
        - StatusCode: 200
  dataApiDataLatestDataset:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatest'
      PathPart: '{dataset}'
  dataApiDataLatestDatasetAcc:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatestDataset'
      PathPart: '{acc}'
  dataApiDataLatestDatasetAccGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiDataLatestDatasetAcc'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
        method.request.path.dataset: true
        method.request.path.acc: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Authorization')\"\
            , \n \"acc\" : \"$input.params('acc')\",\n \"dataset\" : \"$input.params('dataset')\"\
            ,\n  \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiDataLatestDatasetAccGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/data/latest/{dataset}/{acc}'
  dataApiDataLatestCombined:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatest'
      PathPart: combined
  dataApiDataLatestCombinedAcc:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatestCombined'
      PathPart: '{acc}'
  dataApiDataLatestCombinedAccGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiDataLatestCombinedAcc'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
        method.request.path.acc: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Authorization')\"\
            , \n \"acc\" : \"$input.params('acc')\",\n \"grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiDataLatestCombinedAccGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/data/latest/combined/{acc}'
  dataApiDataLatestHomology:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatest'
      PathPart: homology
  dataApiDataLatestHomologyAcc:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatestHomology'
      PathPart: '{acc}'
  dataApiDataLatestHomologyAccGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiDataLatestHomologyAcc'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.header.Authorization: true
        method.request.path.acc: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: "{ \"Authorization\" : \"$input.params().header.get('Authorization')\"\
            , \n \"homology\" : true, \n \"acc\" : \"$input.params('acc')\",\n \"\
            grants\" : \"$util.escapeJavaScript($context.authorizer.principalId)\"\
            \ }"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiDataLatestHomologyAccGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${readAllData}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/GET/data/latest/homology/{acc}'
  dataApiDataLatestUniprot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatest'
      PathPart: uniprot
  dataApiDataLatestUniprotAcc:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiDataLatestUniprot'
      PathPart: '{acc}'
  dataApiDataLatestUniprotAccGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiDataLatestUniprotAcc'
      HttpMethod: GET
      AuthorizationType: CUSTOM
      ApiKeyRequired: true
      AuthorizerId: !Ref 'authDatahandler'
      RequestParameters:
        method.request.path.acc: true
      Integration:
        Type: HTTP
        CacheKeyParameters:
          - method.request.path.acc
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.acc: method.request.path.acc
        RequestTemplates: {}
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates:
              application/json: |-
                #set($lines = $input.body.split('\n'))
                #set($header = $lines.get(0).replaceAll('>[a-zA-Z\|0-9_]+ ','').replaceAll('"',''))
                #set($empty = $!lines.set(0,''))
                #set($quote = '"')
                {"data":[$quote#foreach($line in $lines)$line.replace('
                ','')#end$quote,"$header"]}
            StatusCode: 200
        Uri: https://www.uniprot.org/uniprot/{acc}.fasta
      MethodResponses:
        - StatusCode: 200
  dataApiTools:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !GetAtt 'dataApi.RootResourceId'
      PathPart: tools
  dataApiToolsClustal:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'dataApi'
      ParentId: !Ref 'dataApiTools'
      PathPart: clustal
  dataApiToolsClustalPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'dataApi'
      ResourceId: !Ref 'dataApiToolsClustal'
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters: {}
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters: {}
        RequestTemplates:
          application/json: '{"sequences" : "$util.escapeJavaScript($input.body)"}'
          application/x-www-form-urlencoded: "## convert HTML POST data or HTTP GET\
            \ query string to JSON\n \n## get the raw post data from the AWS built-in\
            \ variable and give it a nicer name\n#if ($context.httpMethod == \"POST\"\
            )\n #set($rawAPIData = $input.path(\"$\"))\n#elseif ($context.httpMethod\
            \ == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData\
            \ = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length()\
            \ - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n\
            \ #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData\
            \ = \"\")\n#end\n \n## first we get the number of \"&\" in the string,\
            \ this tells us if there is more than one key value pair\n#set($countAmpersands\
            \ = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\
            \ \n## if there are no \"&\" at all then we have only one key value pair.\n\
            ## we append an ampersand to the string so that we can tokenise it the\
            \ same way as multiple kv pairs.\n## the \"empty\" kv pair to the right\
            \ of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n\
            \ #set($rawPostData = $rawAPIData + \"&\")\n#end\n \n## now we tokenise\
            \ using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"\
            &\"))\n \n## we set up a variable to hold the valid key value pairs\n\
            #set($tokenisedEquals = [])\n \n## now we set up a loop to find the valid\
            \ key value pairs, which must contain only one \"=\"\n#foreach( $kvPair\
            \ in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"\
            =\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised =\
            \ $kvPair.split(\"=\"))\n  #if ( ( $kvTokenised[0].length() > 0 ) && (\
            \ $kvTokenised[1].length() > 0 ) )\n   ## we found a valid key value pair.\
            \ add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n\
            \  #end\n #end\n#end\n \n## next we set up our loop inside the output\
            \ structure \"{\" and \"}\"\n{\n#foreach( $kvPair in $tokenisedEquals\
            \ )\n  ## finally we output the JSON for this pair and append a comma\
            \ if this isn't the last pair\n  #set($kvTokenised = $kvPair.split(\"\
            =\"))\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size()\
            \ > 1 && $kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"\
            #{else}\"\"#end#if( $foreach.hasNext ),#end\n#end\n}"
        IntegrationResponses:
          - ResponseParameters: {}
            ResponseTemplates: {}
            StatusCode: 200
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${clustal}/invocations'
      MethodResponses:
        - StatusCode: 200
  dataApiToolsClustalPOSTPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${clustal}'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${dataApi}/*/POST/tools/clustal'
  GatewayResponse404:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
        gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      ResponseType: MISSING_AUTHENTICATION_TOKEN
      RestApiId: !Ref 'dataApi'
      StatusCode: '404'
  GatewayResponse401:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
        gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref 'dataApi'
      StatusCode: '401'
  productionDeployment:
    DependsOn: dataApiDoiDoiGET
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'dataApi'
      Description: Default Deployment
      StageName: productionDeploymentDummyStage
  Production:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: api
      Description: Production Stage
      RestApiId: !Ref 'dataApi'
      DeploymentId: !Ref 'productionDeployment'
      Variables:
        Stack: !Ref 'AWS::StackName'
      MethodSettings: []
  publicWebsiteUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref 'dataApi'
          Stage: !Ref 'Production'
      Description: Public website API usage plan
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: public_website_usage
